from django.apps import apps
from django.core.management.base import BaseCommand
from django.db import transaction

from factory_generator import 
from factory_generator.generators import generate_to_db


class Command(BaseCommand):
    help = 'Fill database using data generated by factories in django apps'

    def add_arguments(self, parser):
        parser.add_argument(
            'args', metavar='app_label[.FactoryName]', nargs='*',
            help='Restricts dumped data to the specified app_label or app_label.ModelName.',
        )

        parser.add_argument(
            '--database',
            default=DEFAULT_DB_ALIAS,
            help='Nominates a specific database to dump fixtures from. '
                 'Defaults to the "default" database.',
        )

        parser.add_argument(
            '-e', '--exclude', action='append', default=[],
            help='An app_label or app_label.ModelName to exclude '
                 '(use multiple --exclude to exclude multiple apps/models).',
        )

        parser.add_argument(
            '-q', '--quantity', action='append', default=[],
            help='An app_label or app_label.ModelName to exclude '
                 '(use multiple --exclude to exclude multiple apps/models).',
        )

        parser.add_argument(
            '-u', '--update', action='append', default=False,
            help='An app_label or app_label.ModelName to exclude '
                 '(use multiple --exclude to exclude multiple apps/models).',
        )

    def handle(self, *args, **options):
        config = utils.load_file_config()
        with transaction.atomic():
            for app in config.apps:
                app_config = apps.get_app_config(app)
                for factory in utils.get_app_factories(app_config.path):
                    factory.generate_to_db(config.quantity)
                    message = f'Successfully created {config.quantity} o